from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from pymongo import MongoClient
from collections import Counter
from datetime import datetime, timedelta
import app.keyboards as kb
import arz_api
from config import settings

# cookies = settings['COOKIES']
# user_agent = settings['USER_AGENT']

USERDB = settings['USERDB']
PASSWORDB = settings['PASSWORDB']
MONGO_URI = f"mongodb+srv://{USERDB}:{PASSWORDB}@forumclaster.cpypy.mongodb.net/?retryWrites=true&w=majority"
mongo_client = MongoClient(MONGO_URI)
db = mongo_client['forumdb']
users_collection = db['forumcoll']

router = Router()

def get_user_data(user_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ cookies –∏ user_agent –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    user_data = users_collection.find_one({"user_id": user_id})
    if user_data:
        cookies = {
            "xf_user": user_data.get("xf_user"),
            "xf_tfa_trust": user_data.get("xf_tfa_trust"),
            "xf_session": user_data.get("xf_session")
        }
        user_agent = user_data.get("user_agent")
        return cookies, user_agent
    return None, None


FIXED_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 YaBrowser/24.7.0.0 Safari/537.36"

def initialize_api(user_id: int):

    cookies, _ = get_user_data(user_id)

    if not cookies:
        return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç API —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º user_agent
    return arz_api.ArizonaAPI(user_agent=FIXED_USER_AGENT, cookie=cookies)

@router.message(CommandStart())
async def cmd_start(message: Message):
    api = initialize_api(message.from_user.id)

    if not api:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        )
        return

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)

@router.message(F.text == '–§–æ—Ä—É–º')
async def forum(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.forum_stat)

@router.message(F.text == '–°—á–∏—Ç–∞–ª–æ—á–∫–∞')
async def score(message: Message):
    api = initialize_api(message.from_user.id)

    if not api:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        )
        return

    myuser = api.current_member.id
    information = await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
    thread = api.get_thread(372530)
    last_post = thread.get_posts(thread.pages_count)[-1]
    post = api.get_post(last_post)
    number = post.text_content
    user = post.creator.id
    await information.delete()
    if user == myuser:
        await message.answer(f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - {post.creator.username}')
    else:
        number = int(number)+1
        send_score = api.answer_thread(372530, number)
        await message.answer(f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ - {number} –≤ —Ç–µ–º–µ - {thread.title}')

@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∞–ª–æ–±')
async def stat_complaints(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=kb.forum_sections)

@router.message(F.text == '–ñ–ë –ê–¥–º')
async def jb_adm(message: Message):
    api = initialize_api(message.from_user.id)

    if not api:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        )
        return
    
    stat = await message.answer('–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ.')
    one_week_ago = datetime.now() - timedelta(days = 7)

    closed_threads = []
    closers = []

    category_id = 119
    cpage = 1
    for page in range(1, cpage + 7):
        threads = api.get_threads(category_id, page)
        tunpins = threads['unpins']
        for i in tunpins:
            thread_unpins = api.get_thread(i)
            post = api.get_thread_posts(i)[-1]
            last_post = api.get_post(post)
            if thread_unpins.is_closed:
                closed_at = datetime.fromtimestamp(last_post.create_date)
                if closed_at > one_week_ago:
                    closed_threads.append(thread_unpins)
                    closer_name = last_post.creator.username
                    closers.append(closer_name)
                    
    closer_counts = Counter(closers)
    total_closed = len(closed_threads)
    msg = '\nüìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n'
    if total_closed > 0:
        for closer, count in closer_counts.items():
            percentage = (count / total_closed) * 100
            msg += f'{closer} –∑–∞–∫—Ä—ã–ª {count} –∂–∞–ª–æ–±(-—ã) [{percentage:.0f}%]\n'
    else:
        msg += '–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.\n'

    msg += f'–í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ –∂–∞–ª–æ–±: {total_closed}.'
    await stat.delete()
    await message.answer(msg)

@router.message(F.text == '–ñ–ë –ì–æ—Å')
async def jb_gos(message: Message):
    api = initialize_api(message.from_user.id)
    if not api:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        )
        return
    
    stat = await message.answer('–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ.')
    one_week_ago = datetime.now() - timedelta(days = 7)

    closed_threads = []
    closers = []

    category_id = 121
    cpage = 1
    for page in range(1, cpage + 7):
        threads = api.get_threads(category_id, page)
        tunpins = threads['unpins']
        for i in tunpins:
            thread_unpins = api.get_thread(i)
            post = api.get_thread_posts(i)[-1]
            last_post = api.get_post(post)
            if thread_unpins.is_closed:
                closed_at = datetime.fromtimestamp(last_post.create_date)
                if closed_at > one_week_ago:
                    closed_threads.append(thread_unpins)
                    closer_name = last_post.creator.username
                    closers.append(closer_name)
    closer_counts = Counter(closers)
    total_closed = len(closed_threads)
    msg = '\nüìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n'
    if total_closed > 0:
        for closer, count in closer_counts.items():
            percentage = (count / total_closed) * 100
            msg += f'{closer} –∑–∞–∫—Ä—ã–ª {count} –∂–∞–ª–æ–±(-—ã) [{percentage:.0f}%]\n'
    else:
        msg += '–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.\n'

    msg += f'–í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ –∂–∞–ª–æ–±: {total_closed}.'
    await stat.delete()
    await message.answer(msg)

@router.message(F.text == '–ñ–ë –õ–∏–¥–µ—Ä—ã')
async def jb_lid(message: Message):
    api = initialize_api(message.from_user.id)
    if not api:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        )
        return
    
    stat = await message.answer('–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ.')
    one_week_ago = datetime.now() - timedelta(days = 7)

    closed_threads = []
    closers = []

    category_id = 124
    cpage = 1
    for page in range(1, cpage + 3):
        threads = api.get_threads(category_id, page)
        tunpins = threads['unpins']
        for i in tunpins:
            thread_unpins = api.get_thread(i)
            post = api.get_thread_posts(i)[-1]
            last_post = api.get_post(post)
            if thread_unpins.is_closed:
                closed_at = datetime.fromtimestamp(last_post.create_date)
                if closed_at > one_week_ago:
                    closed_threads.append(thread_unpins)
                    closer_name = last_post.creator.username
                    closers.append(closer_name)
    closer_counts = Counter(closers)
    total_closed = len(closed_threads)
    msg = '\nüìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n'
    if total_closed > 0:
        for closer, count in closer_counts.items():
            percentage = (count / total_closed) * 100
            msg += f'{closer} –∑–∞–∫—Ä—ã–ª {count} –∂–∞–ª–æ–±(-—ã) [{percentage:.0f}%]\n'
    else:
        msg += '–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.\n'

    msg += f'–í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ –∂–∞–ª–æ–±: {total_closed}.'
    await stat.delete()
    await message.answer(msg)

@router.message(F.text == '–†–ü –ë–∏–æ–≥—Ä–∞—Ñ–∏–∏')
async def rp_bio(message: Message):
    api = initialize_api(message.from_user.id)
    if not api:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        )
        return
    
    stat = await message.answer('–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ.')
    one_week_ago = datetime.now() - timedelta(days = 7)

    closed_threads = []
    closers = []

    category_id = 374
    cpage = 1
    for page in range(1, cpage + 5):
        threads = api.get_threads(category_id, page)
        tunpins = threads['unpins']
        for i in tunpins:
            thread_unpins = api.get_thread(i)
            post = api.get_thread_posts(i)[-1]
            last_post = api.get_post(post)
            if thread_unpins.is_closed:
                closed_at = datetime.fromtimestamp(last_post.create_date)
                if closed_at > one_week_ago:
                    closed_threads.append(thread_unpins)
                    closer_name = last_post.creator.username
                    closers.append(closer_name)
    closer_counts = Counter(closers)
    total_closed = len(closed_threads)
    msg = '\nüìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n'
    if total_closed > 0:
        for closer, count in closer_counts.items():
            percentage = (count / total_closed) * 100
            msg += f'{closer} –∑–∞–∫—Ä—ã–ª {count} –∂–∞–ª–æ–±(-—ã) [{percentage:.0f}%]\n'
    else:
        msg += '–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.\n'

    msg += f'–í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ –∂–∞–ª–æ–±: {total_closed}.'
    await stat.delete()
    await message.answer(msg)

@router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def go_to_main_menu(message: Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kb.main)